from telegram import Update, WebAppInfo, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, ContextTypes, MessageHandler, filters, CommandHandler
import json
import html
import logging

TELEGRAM_BOT_TOKEN = "8250987817:AAFx70NebFO6Lrl-xS7RDz6zaeM01bdzNrA"
WEB_APP_URL = "https://slinsdota.github.io/medic_mini_app2/"  

# –í–∫–ª—é—á–∏—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)

logger = logging.getLogger(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—É—Å–∫–∞ Mini App"""
    keyboard = [
        [KeyboardButton(
            text="üß™ –û—Ç–∫—Ä—ã—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä",
            web_app=WebAppInfo(url=WEB_APP_URL)
        )]
    ]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, 
        resize_keyboard=True,
        one_time_keyboard=False
    )
    
    welcome_message = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä!\n\n"
        "üß™ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ "
        "–∏ –≤–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞—à–∏—Ö –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤.\n\n"
        "üìä –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å:\n"
        "‚Ä¢ –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏ (–û–ê–ö)\n"
        "‚Ä¢ –ë–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏\n"
        "‚Ä¢ –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –º–æ—á–∏ (–û–ê–ú)\n"
        "‚Ä¢ –ì–µ–º–æ—Å—Ç–∞–∑–∏–æ–≥—Ä–∞–º–º—É"
    )
    
    await update.message.reply_text(
        welcome_message,
        reply_markup=reply_markup
    )


async def handle_web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Web App")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ web_app
        if update.message and update.message.web_app_data:
            data_string = update.message.web_app_data.data
            logger.info(f"–î–∞–Ω–Ω—ã–µ: {data_string}")
            
            # –ü–∞—Ä—Å–∏–º JSON
            data = json.loads(data_string)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞
            type_names = {
                'blood-general': '–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏',
                'blood-bio': '–ë–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏',
                'urine-general': '–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –º–æ—á–∏',
                'hemostasis': '–ì–µ–º–æ—Å—Ç–∞–∑–∏–æ–≥—Ä–∞–º–º–∞'
            }
            
            analysis_type = type_names.get(data.get('type', ''), '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = f"üß™ <b>{analysis_type}</b>\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results = data.get('results', [])
            if results:
                for result in results:
                    status = result.get('status', '')
                    status_icon = "‚úÖ" if status == 'normal' else "‚ö†Ô∏è" if status == 'warning' else "‚ùå"
                    
                    parameter = html.escape(result.get('parameter', ''))
                    value = html.escape(result.get('value', ''))
                    explanation = html.escape(result.get('explanation', ''))
                    
                    message_text += f"{status_icon} <b>{parameter}:</b> {value}\n"
                    message_text += f"{explanation}\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
                has_warnings = any(r.get('status') == 'warning' for r in results)
                if has_warnings:
                    message_text += (
                        "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è. "
                        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –≤—Ä–∞—á–æ–º –¥–ª—è —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ "
                        "–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ª–µ—á–µ–Ω–∏—è."
                    )
                else:
                    message_text += (
                        "üéâ <b>–û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!</b> –í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ. "
                        "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–µ—Å—Ç–∏ –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏!"
                    )
            else:
                message_text += "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã."
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(
                message_text, 
                parse_mode='HTML'
            )
            
            logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
            
        else:
            logger.warning("web_app_data –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
            await update.message.reply_text(
                "‚ùå –î–∞–Ω–Ω—ã–µ –∏–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã."
            )
        
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
        )


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(
        MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_web_app_data)
    )
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
